# >---------------------------------------------------------------------------<
#
#            _____       _ _                              
#           |  __ \     (_) |       /\                    
#           | |__) |__ _ _| |___   /  \   _ __  _ __  ___ 
#           |  _  // _` | | / __| / /\ \ | '_ \| '_ \/ __|
#           | | \ \ (_| | | \__ \/ ____ \| |_) | |_) \__ \
#           |_|  \_\__,_|_|_|___/_/    \_\ .__/| .__/|___/
#                                        | |   | |        
#                                        |_|   |_|
#
#   Template generated by rails_apps_composer. For more information, see:
#   https://github.com/RailsApps/rails_apps_composer/
#   Thank you to Michael Bleigh for leading the way with the RailsWizard gem.
#
# >---------------------------------------------------------------------------<

# >----------------------------[ Initial Setup ]------------------------------<

initializer 'generators.rb', <<-RUBY
Rails.application.config.generators do |g|
end
RUBY

@recipes = ["setup", "readme", "gems", "testing", "auth", "email", "models", "controllers", "views", "routes", "frontend", "database", "extras"]

def recipes; @recipes end
def recipe?(name); @recipes.include?(name) end

def say_custom(tag, text); say "\033[1m\033[36m" + tag.to_s.rjust(10) + "\033[0m" + "  #{text}" end
def say_recipe(name); say "\033[1m\033[36m" + "recipe".rjust(10) + "\033[0m" + "  Running #{name} recipe..." end
def say_wizard(text); say_custom(@current_recipe || 'composer', text) end

def ask_wizard(question)
  ask "\033[1m\033[30m\033[46m" + (@current_recipe || "prompt").rjust(10) + "\033[1m\033[36m" + "  #{question}\033[0m"
end

def yes_wizard?(question)
  answer = ask_wizard(question + " \033[33m(y/n)\033[0m")
  case answer.downcase
    when "yes", "y"
      true
    when "no", "n"
      false
    else
      yes_wizard?(question)
  end
end

def no_wizard?(question); !yes_wizard?(question) end

def multiple_choice(question, choices)
  say_custom('question', question)
  values = {}
  choices.each_with_index do |choice,i| 
    values[(i + 1).to_s] = choice[1]
    say_custom (i + 1).to_s + ')', choice[0]
  end
  answer = ask_wizard("Enter your selection:") while !values.keys.include?(answer)
  values[answer]
end

@current_recipe = nil
@configs = {}

@after_blocks = []
def after_bundler(&block); @after_blocks << [@current_recipe, block]; end
@after_everything_blocks = []
def after_everything(&block); @after_everything_blocks << [@current_recipe, block]; end
@before_configs = {}
def before_config(&block); @before_configs[@current_recipe] = block; end

def copy_from_repo(filename, opts = {})
  repo = 'https://raw.github.com/RailsApps/rails3-application-templates/master/files-v2/'
  repo = opts[:repo] unless opts[:repo].nil?
  if (!opts[:recipe].nil?) && (!recipes.include? opts[:recipe])
    return
  end
  source_filename = filename
  destination_filename = filename
  unless opts[:recipe].nil?
    if filename.include? opts[:recipe]
      destination_filename = filename.gsub(/\-#{opts[:recipe]}/, '')
    end
  end
  if (recipes.include? 'haml') && (filename.include? 'views')
    remove_file destination_filename
    source_filename = source_filename.gsub(/.erb/, '.haml')
    destination_filename = destination_filename.gsub(/.erb/, '.haml')
  end
  begin
    remove_file destination_filename
    get repo + source_filename, destination_filename
  rescue OpenURI::HTTPError
    say_wizard "Unable to obtain #{source_filename} from the repo #{repo}"
  end
end

# this application template only supports Rails version 3.1 and newer
case Rails::VERSION::MAJOR.to_s
when "3"
  case Rails::VERSION::MINOR.to_s
  when "0"
    say_wizard "You are using Rails version #{Rails::VERSION::STRING} which is not supported. Try 3.1 or newer."
    raise StandardError.new "Rails #{Rails::VERSION::STRING} is not supported. Try 3.1 or newer."
  end
else
  say_wizard "You are using Rails version #{Rails::VERSION::STRING} which is not supported. Try 3.1 or newer."
  raise StandardError.new "Rails #{Rails::VERSION::STRING} is not supported. Try 3.1 or newer."
end

say_wizard "Using rails_apps_composer recipes to generate an application."

# >---------------------------[ Autoload Modules/Classes ]-----------------------------<

inject_into_file 'config/application.rb', :after => 'config.autoload_paths += %W(#{config.root}/extras)' do <<-'RUBY'

    config.autoload_paths += %W(#{config.root}/lib)
RUBY
end

# >---------------------------------[ Recipes ]----------------------------------<


# >---------------------------------[ setup ]---------------------------------<

@current_recipe = "setup"
@before_configs["setup"].call if @before_configs["setup"]
say_recipe 'setup'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/setup.rb

## Ruby on Rails
say_wizard "You are using Ruby version #{RUBY_VERSION}."
say_wizard "You are using Rails version #{Rails::VERSION::STRING}."

## Git
say_wizard "initialize git"
recipes << 'git'
if recipes.include? 'git'
  begin
    remove_file '.gitignore'
    get 'https://raw.github.com/RailsApps/rails3-application-templates/master/files/gitignore.txt', '.gitignore'
  rescue OpenURI::HTTPError
    say_wizard "Unable to obtain gitignore file from the repo"
  end
  git :init
  git :add => '.'
  git :commit => "-aqm 'rails_apps_composer: initial commit'"
end

## Is sqlite3 in the Gemfile?
f = File.open(destination_root() + '/Gemfile', "r")
gemfile = ''
f.each_line do |line|
  gemfile += line
end
sqlite_detected = gemfile.include? 'sqlite3'

## Web Server
dev_webserver = multiple_choice "Web server for development?", [["WEBrick (default)", "webrick"], 
  ["Thin", "thin-development"], ["Unicorn", "unicorn-development"], ["Puma", "puma-development"]]
recipes << dev_webserver
prod_webserver = multiple_choice "Web server for production?", [["Same as development", "same"], 
  ["Thin", "thin-production"], ["Unicorn", "unicorn-development"], ["Puma", "puma-production"]]
if dev_webserver == 'same'
  case prod_webserver
    when 'thin-development'
      recipes << 'thin-production'
    when 'unicorn-development'
      recipes << 'unicorn-production'
    when 'puma-development'
      recipes << 'puma-production'
  end
else
  recipes << prod_webserver
end

## Database Adapter
database = multiple_choice "Database used in development?", [["SQLite", "sqlite"], ["PostgreSQL", "postgresql"], ["MySQL", "mysql"], ["MongoDB", "mongodb"]]
recipes << database
case database
  when 'mongodb'
    unless sqlite_detected
      orm = multiple_choice "How will you connect to MongoDB?", [["Mongoid","mongoid"]]
      recipes << orm
    else
      raise StandardError.new "SQLite detected in the Gemfile. Use '-O' or '--skip-activerecord' as in 'rails new foo -O' if you don't want ActiveRecord and SQLite"
    end
end

## Template Engine
templating = multiple_choice "Template engine?", [["ERB", "erb"], ["Haml", "haml"]]
case templating
	when 'erb'
    recipes << 'erb'
  when 'haml'
    recipes << 'haml'
end

## Testing Framework
if recipes.include? 'testing'
  testing = multiple_choice "Testing framework?", [["Test::Unit", "test_unit"], ["RSpec with Capybara and Cucumber", "cucumber"], ["RSpec with Capybara and Turnip", "turnip"], ["RSpec with Capybara", "rspec"]]
  recipes << testing
  recipes << 'rspec' if (testing == 'cucumber') || (testing == 'turnip')
  fixtures = multiple_choice "Fixture replacement?", [["None","none"], ["Factory Girl","factory_girl"], ["Machinist","machinist"]]
  recipes << fixtures unless fixtures == 'none'
end

## Front-end Framework
if recipes.include? 'frontend'
  frontend = multiple_choice "Front-end framework?", [["None", "none"], ["Twitter Bootstrap (Sass)", "bootstrap-sass"], ["Twitter Bootstrap (Less)", "bootstrap-less"], ["Zurb Foundation", "foundation"], ["Skeleton", "skeleton"], ["Just normalize CSS for consistent styling", "normalize"]]
  recipes << frontend unless frontend == 'none'
  if (recipes.include? 'bootstrap-sass') || (recipes.include? 'bootstrap-less')
    recipes << 'bootstrap'
  end
end

## Form Builder
form_builder = multiple_choice "Form builder?", [["None", "none"], ["SimpleForm", "simple_form"]]
recipes << form_builder unless form_builder == 'none'

## Email
if recipes.include? 'email'
  email_account = multiple_choice "Add support for sending email?", [["None", "none"], ["Gmail","gmail"], ["SMTP","smtp"], ["SendGrid","sendgrid"], ["Mandrill","mandrill"]]
  recipes << email_account unless email_account == 'none'
  recipes.delete('email') if email_account == 'none'
end

## Authentication and Authorization
if recipes.include? 'auth'
  authentication = multiple_choice "Authentication?", [["None", "none"], ["Devise", "devise"], ["OmniAuth", "omniauth"]]
  case authentication
    when 'devise'
      recipes << 'devise'
      if recipes.include? 'mongodb'
        devise_modules = multiple_choice "Devise modules?", [["Devise with default modules","devise-standard"]]
      else
        devise_modules = multiple_choice "Devise modules?", [["Devise with default modules","devise-standard"], ["Devise with Confirmable module","devise-confirmable"], ["Devise with Confirmable and Invitable modules","devise-invitable"]]
      end
      case devise_modules
        when 'confirmable'
          recipes << 'devise-confirmable'
        when 'invitable'
          recipes << 'devise-confirmable'
          recipes << 'devise-invitable'
      end
    when 'omniauth'
      recipes << 'omniauth'
      omniauth_provider = multiple_choice "OmniAuth provider?", [["Facebook", "facebook"], ["Twitter", "twitter"], ["GitHub", "github"], ["LinkedIn", "linkedin"], ["Google-Oauth-2", "google-oauth2"], ["Tumblr", "tumblr"]]
      recipes << omniauth_provider
  end
  authorization = multiple_choice "Authorization?", [["None", "none"], ["CanCan with Rolify", "cancan"]]
  recipes << authorization unless authorization == 'none'
end

## MVC
if (recipes.include? 'models') && (recipes.include? 'controllers') && (recipes.include? 'views') && (recipes.include? 'routes')
  if recipes.include? 'cancan'
    starterapp = multiple_choice "Install a starter app?", [["None", "none"], ["Home Page", "simple_home"], 
      ["Home Page, User Accounts", "user_accounts"], 
      ["Home Page, User Accounts, Admin Dashboard", "admin_dashboard"]]
  elsif recipes.include? 'devise'
    if recipes.include? 'mongoid'
      starterapp = multiple_choice "Install a starter app?", [["None", "none"], ["Home Page", "simple_home"], 
        ["Home Page, User Accounts", "user_accounts"], 
        ["Home Page, User Accounts, Subdomains", "subdomains"]]
    else
      starterapp = multiple_choice "Install a starter app?", [["None", "none"], ["Home Page", "simple_home"], 
        ["Home Page, User Accounts", "user_accounts"]]
    end
  elsif recipes.include? 'omniauth'
    starterapp = multiple_choice "Install a starter app?", [["None", "none"], ["Home Page", "simple_home"], 
      ["Home Page, User Accounts", "user_accounts"]]
  else
    starterapp = multiple_choice "Install a starter app?", [["None", "none"], ["Home Page", "simple_home"]]
  end
  recipes << starterapp unless starterapp == 'none'
  recipes << 'simple_home' if (starterapp == 'user_accounts') || (starterapp == 'admin_dashboard') || (starterapp == 'subdomains')
  recipes << 'user_accounts' if (starterapp == 'admin_dashboard' )|| (starterapp == 'subdomains')
  if (recipes.include? 'prelaunch') && (recipes.include? 'devise') && (recipes.include? 'cancan')
    prelaunch_app = multiple_choice "Install a prelaunch app?", [["None", "none"], ["Prelaunch Signup App", "signup_app"]]
    if prelaunch_app == 'signup_app'
      recipes << 'signup_app'
      recipes << 'devise-confirmable'
      bulkmail = multiple_choice "Send news and announcements with a mail service?", [["None", "none"], ["MailChimp","mailchimp"]]
      recipes << bulkmail unless bulkmail == 'none'
      if recipes.include? 'git'
        prelaunch_branch = multiple_choice "Git branch for the prelaunch app?", [["wip (work-in-progress)", "wip"], ["master", "master"], ["prelaunch", "prelaunch"], ["staging", "staging"]]
        if prelaunch_branch == 'master'
          main_branch = multiple_choice "Git branch for the main app?", [["None (delete)", "none"], ["wip (work-in-progress)", "wip"], ["edge", "edge"]]
        end
      end
    end
  end
end


# >--------------------------------[ readme ]---------------------------------<

@current_recipe = "readme"
@before_configs["readme"].call if @before_configs["readme"]
say_recipe 'readme'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/readme.rb

# remove default READMEs
%w{
  README
  README.rdoc
  doc/README_FOR_APP
}.each { |file| remove_file file }

# add placeholder READMEs and humans.txt file
copy_from_repo 'public/humans.txt'
copy_from_repo 'README'
copy_from_repo 'README.textile'
gsub_file "README", /App_Name/, "#{app_name.humanize.titleize}"
gsub_file "README.textile", /App_Name/, "#{app_name.humanize.titleize}"

# Ruby on Rails
gsub_file "README.textile", /\* Ruby/, "* Ruby version #{RUBY_VERSION}"
gsub_file "README.textile", /\* Rails/, "* Rails version #{Rails::VERSION::STRING}"

# Database
gsub_file "README.textile", /SQLite/, "MongoDB" if recipes.include? 'mongodb'
gsub_file "README.textile", /ActiveRecord/, "the Mongoid ORM" if recipes.include? 'mongoid'

# Template Engine
gsub_file "README.textile", /ERB/, "Haml" if recipes.include? 'haml'

# Testing Framework
gsub_file "README.textile", /Test::Unit/, "RSpec" if recipes.include? 'rspec'
gsub_file "README.textile", /RSpec/, "RSpec and Cucumber" if recipes.include? 'cucumber'
gsub_file "README.textile", /RSpec/, "RSpec and Factory Girl" if recipes.include? 'factory_girl'
gsub_file "README.textile", /RSpec/, "RSpec and Machinist" if recipes.include? 'machinist'

# Front-end Framework
gsub_file "README.textile", /Front-end Framework: None/, "Front-end Framework: Twitter Bootstrap (Sass)" if recipes.include? 'bootstrap-sass'
gsub_file "README.textile", /Front-end Framework: None/, "Front-end Framework: Twitter Bootstrap (Less)" if recipes.include? 'bootstrap-less'
gsub_file "README.textile", /Front-end Framework: None/, "Front-end Framework: Zurb Foundation" if recipes.include? 'foundation'
gsub_file "README.textile", /Front-end Framework: None/, "Front-end Framework: Skeleton" if recipes.include? 'skeleton'
gsub_file "README.textile", /Front-end Framework: None/, "Front-end Framework: Normalized CSS" if recipes.include? 'normalize'

# Form Builder
gsub_file "README.textile", /Form Builder: None/, "Form Builder: SimpleForm" if recipes.include? 'simple_form'
gsub_file "README.textile", /Form Builder: None/, "Form Builder: SimpleForm (Bootstrap)" if recipes.include? 'simple_form_bootstrap'

# Email
if recipes.include? 'email'
  gsub_file "README.textile", /Gmail/, "SMTP" if recipes.include? 'smtp'
  gsub_file "README.textile", /Gmail/, "SendGrid" if recipes.include? 'sendgrid'
  gsub_file "README.textile", /Gmail/, "Mandrill" if recipes.include? 'mandrill'
else
  gsub_file "README.textile", /h2. Email/, ""
  gsub_file "README.textile", /The application is configured to send email using a Gmail account./, ""
end

# Authentication and Authorization
gsub_file "README.textile", /Authentication: None/, "Authentication: Devise" if recipes.include? 'devise'
gsub_file "README.textile", /Authentication: None/, "Authentication: OmniAuth" if recipes.include? 'omniauth'
gsub_file "README.textile", /Authorization: None/, "Authorization: CanCan" if recipes.include? 'cancan'

git :add => '.' if recipes.include? 'git'
git :commit => "-aqm 'rails_apps_composer: add README files'" if recipes.include? 'git'


# >---------------------------------[ gems ]----------------------------------<

@current_recipe = "gems"
@before_configs["gems"].call if @before_configs["gems"]
say_recipe 'gems'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/gems.rb

### GEMFILE ###

## Ruby on Rails
insert_into_file 'Gemfile', "ruby '1.9.3'\n", :before => "gem 'rails', '3.2.6'" if recipes.include? 'heroku'

## Web Server
gem 'thin', '>= 1.4.1', :group => [:development, :test] if recipes.include? 'thin-development'
gem 'unicorn', '>= 4.3.1', :group => [:development, :test] if recipes.include? 'unicorn-development'
gem 'puma', '>= 1.5.0', :group => [:development, :test] if recipes.include? 'puma-development'
gem 'thin', '>= 1.4.1', :group => :production if recipes.include? 'thin-production'
gem 'unicorn', '>= 4.3.1', :group => :production if recipes.include? 'unicorn-production'
gem 'puma', '>= 1.5.0', :group => :production if recipes.include? 'puma-production'

## Database Adapter
gem 'mongoid', '>= 3.0.1' if recipes.include? 'mongoid'
gem 'pg', '>= 0.14.0' if recipes.include? 'postgresql'
gem 'mysql2', '>= 0.3.11' if recipes.include? 'mysql'
copy_from_repo 'database.yml', :recipe => 'postgresql'
copy_from_repo 'database.yml', :recipe => 'mysql'

## Template Engine
if recipes.include? 'haml'
  gem 'haml', '>= 3.1.6'
  gem 'haml-rails', '>= 0.3.4', :group => :development
end

## Testing Framework
if (recipes.include? 'rspec')
  gem 'rspec-rails', '>= 2.11.0', :group => [:development, :test]
  gem 'capybara', '>= 1.1.2', :group => :test
  if recipes.include? 'mongoid'
    # use the database_cleaner gem to reset the test database
    gem 'database_cleaner', '>= 0.8.0', :group => :test
    # include RSpec matchers from the mongoid-rspec gem
    gem 'mongoid-rspec', '>= 1.4.6', :group => :test
  end
  gem 'email_spec', '>= 1.2.1', :group => :test if recipes.include? 'email'
end
if recipes.include? 'cucumber'
  gem 'cucumber-rails', '>= 1.3.0', :group => :test, :require => false
  gem 'database_cleaner', '>= 0.8.0', :group => :test unless recipes.include? 'mongoid'
  gem 'launchy', '>= 2.1.0', :group => :test
end
gem 'turnip', '>= 1.0.0', :group => :test if recipes.include? 'turnip'
gem 'factory_girl_rails', '>= 3.5.0', :group => [:development, :test] if recipes.include? 'factory_girl'
gem 'machinist', :group => :test if recipes.include? 'machinist'

## Front-end Framework
gem 'bootstrap-sass', '>= 2.0.4.0' if recipes.include? 'bootstrap-sass'
gem 'zurb-foundation', '>= 3.0.5' if recipes.include? 'foundation'
if recipes.include? 'bootstrap-less'
  gem 'twitter-bootstrap-rails', '>= 2.0.3', :group => :assets
  # install gem 'therubyracer' to use Less
  gem 'therubyracer', :group => :assets, :platform => :ruby
end

## Form Builder
gem 'simple_form' if recipes.include? 'simple_form'

## Email
gem 'sendgrid' if recipes.include? 'sendgrid'
gem 'hominid' if recipes.include? 'mandrill'

## Authentication (Devise)
gem 'devise', '>= 2.1.2' if recipes.include? 'devise'
gem 'devise_invitable', '>= 1.0.3' if recipes.include? 'devise-invitable'

## Authentication (OmniAuth)
gem 'omniauth', '>= 1.1.0' if recipes.include? 'omniauth'
gem 'omniauth-twitter' if recipes.include? 'twitter'
gem 'omniauth-facebook' if recipes.include? 'facebook'
gem 'omniauth-github' if recipes.include? 'github'
gem 'omniauth-linkedin' if recipes.include? 'linkedin'
gem 'omniauth-google-oauth2' if recipes.include? 'google-oauth2'
gem 'omniauth-tumblr' if recipes.include? 'tumblr'

## Authorization 
if recipes.include? 'cancan'
  gem 'cancan', '>= 1.6.8'
  gem 'rolify', '>= 3.1.0'
end

## Signup App 
if recipes.include? 'signup_app'
  gem 'google_visualr', '>= 2.1.2'
  gem 'jquery-datatables-rails', '>= 1.10.0'
end

## Git
git :add => '.' if recipes.include? 'git'
git :commit => "-aqm 'rails_apps_composer: Gemfile'" if recipes.include? 'git'

### GENERATORS ###
after_bundler do
  ## Database
  generate 'mongoid:config' if recipes.include? 'mongoid'
  remove_file 'config/database.yml' if recipes.include? 'mongoid'
  ## Form Builder
  if recipes.include? 'simple_form'
    if recipes.include? 'bootstrap'
      say_wizard "recipe installing simple_form for use with Twitter Bootstrap"
      generate 'simple_form:install --bootstrap'
    else
      say_wizard "recipe installing simple_form"
      generate 'simple_form:install'
    end
  end
  ## Git
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: generators'" if recipes.include? 'git'
end # after_bundler


# >--------------------------------[ testing ]--------------------------------<

@current_recipe = "testing"
@before_configs["testing"].call if @before_configs["testing"]
say_recipe 'testing'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/testing.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### RSPEC ###
  if recipes.include? 'rspec'
    say_wizard "recipe installing RSpec"
    generate 'rspec:install'
    if recipes.include? 'email'
      generate 'email_spec:steps'
      inject_into_file 'spec/spec_helper.rb', "require 'email_spec'\n", :after => "require 'rspec/rails'\n"
      inject_into_file 'spec/spec_helper.rb', :after => "RSpec.configure do |config|\n" do <<-RUBY
  config.include(EmailSpec::Helpers)
  config.include(EmailSpec::Matchers)
RUBY
      end
    end
    run 'rm -rf test/' # Removing test folder (not needed for RSpec)
    inject_into_file 'config/application.rb', :after => "Rails::Application\n" do <<-RUBY

    # don't generate RSpec tests for views and helpers
    config.generators do |g|
      g.view_specs false
      g.helper_specs false
      #{"g.fixture_replacement :machinist" if recipes.include? 'machinist'}
    end

RUBY
    end
    ## RSPEC AND MONGOID
    if recipes.include? 'mongoid'
      # remove ActiveRecord artifacts
      gsub_file 'spec/spec_helper.rb', /config.fixture_path/, '# config.fixture_path'
      gsub_file 'spec/spec_helper.rb', /config.use_transactional_fixtures/, '# config.use_transactional_fixtures'
      # reset your application database to a pristine state during testing
      inject_into_file 'spec/spec_helper.rb', :before => "\nend" do
      <<-RUBY
  \n
  require 'database_cleaner'
  config.before(:suite) do
    DatabaseCleaner.strategy = :truncation
    DatabaseCleaner.orm = "mongoid"
  end

  config.before(:each) do
    DatabaseCleaner.clean
  end
RUBY
      end
      # remove either possible occurrence of "require rails/test_unit/railtie"
      gsub_file 'config/application.rb', /require 'rails\/test_unit\/railtie'/, '# require "rails/test_unit/railtie"'
      gsub_file 'config/application.rb', /require "rails\/test_unit\/railtie"/, '# require "rails/test_unit/railtie"'
      # configure RSpec to use matchers from the mongoid-rspec gem
      create_file 'spec/support/mongoid.rb' do
      <<-RUBY
RSpec.configure do |config|
  config.include Mongoid::Matchers
end
RUBY
      end
    end
    ## RSPEC AND DEVISE
    if recipes.include? 'devise'
      # add Devise test helpers
      create_file 'spec/support/devise.rb' do
      <<-RUBY
RSpec.configure do |config|
  config.include Devise::TestHelpers, :type => :controller
end
RUBY
      end
    end
  end
  ### CUCUMBER ###
  if recipes.include? 'cucumber'
    say_wizard "recipe installing Cucumber"
    generate "cucumber:install --capybara#{' --rspec' if recipes.include?('rspec')}#{' -D' if recipes.include?('mongoid')}"
    # make it easy to run Cucumber for single features without adding "--require features" to the command line
    gsub_file 'config/cucumber.yml', /std_opts = "/, 'std_opts = "-r features/support/ -r features/step_definitions '
    if recipes.include? 'email'
      create_file 'features/support/email_spec.rb' do <<-RUBY
require 'email_spec/cucumber'
RUBY
      end      
    end
    ## CUCUMBER AND MONGOID
    if recipes.include? 'mongoid'
      gsub_file 'features/support/env.rb', /transaction/, "truncation"
      inject_into_file 'features/support/env.rb', :after => 'begin' do
        "\n  DatabaseCleaner.orm = 'mongoid'"
      end
    end
  end
  ## TURNIP
  if recipes.include? 'turnip'
    append_to_file '.rspec', '-r turnip/rspec'
    inject_into_file 'spec/spec_helper.rb', "require 'turnip/capybara'\n", :after => "require 'rspec/rails'\n"
    create_file 'spec/acceptance/steps/.gitkeep'
  end
  ## FIXTURE REPLACEMENTS
  if recipes.include? 'machinist'
    say_wizard "generating blueprints file for 'machinist'"
    generate 'machinist:install'
  end
  ### GIT ###
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: testing framework'" if recipes.include? 'git'
end # after_bundler

after_everything do
  say_wizard "recipe running after everything"
  ### RSPEC ###
  if recipes.include? 'rspec'
    if (recipes.include? 'devise') && (recipes.include? 'user_accounts')
      say_wizard "copying RSpec files from the rails3-devise-rspec-cucumber examples"
      repo = 'https://raw.github.com/RailsApps/rails3-devise-rspec-cucumber/master/'
      copy_from_repo 'spec/factories/users.rb', :repo => repo
      gsub_file 'spec/factories/users.rb', /# confirmed_at/, "confirmed_at" if recipes.include? 'devise-confirmable'
      copy_from_repo 'spec/controllers/home_controller_spec.rb', :repo => repo
      copy_from_repo 'spec/controllers/users_controller_spec.rb', :repo => repo
      copy_from_repo 'spec/models/user_spec.rb', :repo => repo
      remove_file 'spec/views/home/index.html.erb_spec.rb'
      remove_file 'spec/views/home/index.html.haml_spec.rb'
      remove_file 'spec/views/users/show.html.erb_spec.rb'
      remove_file 'spec/views/users/show.html.haml_spec.rb'
      remove_file 'spec/helpers/home_helper_spec.rb'
      remove_file 'spec/helpers/users_helper_spec.rb'
    end
    ## RSPEC AND OMNIAUTH
    if (recipes.include? 'omniauth') && (recipes.include? 'user_accounts')
      say_wizard "copying RSpec files from the rails3-mongoid-omniauth examples"
      repo = 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
      copy_from_repo 'spec/spec_helper.rb', :repo => repo
      copy_from_repo 'spec/factories/users.rb', :repo => repo
      copy_from_repo 'spec/controllers/sessions_controller_spec.rb', :repo => repo
      copy_from_repo 'spec/controllers/home_controller_spec.rb', :repo => repo
      copy_from_repo 'spec/controllers/users_controller_spec.rb', :repo => repo
      copy_from_repo 'spec/models/user_spec.rb', :repo => repo
    end
    ## GIT
    git :add => '.' if recipes.include? 'git'
    git :commit => "-aqm 'rails_apps_composer: rspec files'" if recipes.include? 'git'
  end
  ### CUCUMBER ###
  if recipes.include? 'cucumber'
    ## CUCUMBER AND DEVISE
    if (recipes.include? 'devise') && (recipes.include? 'user_accounts')
      say_wizard "copying Cucumber scenarios from the rails3-devise-rspec-cucumber examples"
      repo = 'https://raw.github.com/RailsApps/rails3-devise-rspec-cucumber/master/'
      copy_from_repo 'spec/controllers/home_controller_spec.rb', :repo => repo
      copy_from_repo 'features/users/sign_in.feature', :repo => repo
      copy_from_repo 'features/users/sign_out.feature', :repo => repo
      copy_from_repo 'features/users/sign_up.feature', :repo => repo
      copy_from_repo 'features/users/user_edit.feature', :repo => repo
      copy_from_repo 'features/users/user_show.feature', :repo => repo
      copy_from_repo 'features/step_definitions/user_steps.rb', :repo => repo
      copy_from_repo 'features/support/paths.rb', :repo => repo
      if recipes.include? 'devise-confirmable'
        gsub_file 'features/step_definitions/user_steps.rb', /Welcome! You have signed up successfully./, "A message with a confirmation link has been sent to your email address."
        inject_into_file 'features/users/sign_in.feature', :before => '    Scenario: User signs in successfully' do
<<-RUBY
  Scenario: User has not confirmed account
    Given I exist as an unconfirmed user
    And I am not logged in
    When I sign in with valid credentials
    Then I see an unconfirmed account message
    And I should be signed out
RUBY
        end
      end
    end
    ## GIT
    git :add => '.' if recipes.include? 'git'
    git :commit => "-aqm 'rails_apps_composer: cucumber files'" if recipes.include? 'git'
  end
end # after_everything


# >---------------------------------[ auth ]----------------------------------<

@current_recipe = "auth"
@before_configs["auth"].call if @before_configs["auth"]
say_recipe 'auth'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/auth.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### DEVISE ###
  if recipes.include? 'devise'
    # Prevent logging of password_confirmation
    gsub_file 'config/application.rb', /:password/, ':password, :password_confirmation'
    generate 'devise:install'
    generate 'devise_invitable:install' if recipes.include? 'devise-invitable'
    generate 'devise user'
    ## DEVISE AND CUCUMBER
    if recipes.include? 'cucumber'
      # Cucumber wants to test GET requests not DELETE requests for destroy_user_session_path
      # (see https://github.com/RailsApps/rails3-devise-rspec-cucumber/issues/3)
      gsub_file 'config/initializers/devise.rb', 'config.sign_out_via = :delete', 'config.sign_out_via = Rails.env.test? ? :get : :delete'
    end
    ## DEVISE MODULES
    if recipes.include? 'devise-confirmable'
      gsub_file 'app/models/user.rb', /:registerable,/, ":registerable, :confirmable,"
      gsub_file 'app/models/user.rb', /:remember_me/, ':remember_me, :confirmed_at'
      if recipes.include? 'mongoid'
        gsub_file 'app/models/user.rb', /# field :confirmation_token/, "field :confirmation_token"
        gsub_file 'app/models/user.rb', /# field :confirmed_at/, "field :confirmed_at"
        gsub_file 'app/models/user.rb', /# field :confirmation_sent_at/, "field :confirmation_sent_at"
        gsub_file 'app/models/user.rb', /# field :unconfirmed_email/, "field :unconfirmed_email"
      end
    end
    if recipes.include? 'devise-invitable'
      if recipes.include? 'mongoid'
        gsub_file 'app/models/user.rb', /\bend\s*\Z/ do
  <<-RUBY
  #invitable
  field :invitation_token, :type => String
  field :invitation_sent_at, :type => Time
  field :invitation_accepted_at, :type => Time
  field :invitation_limit, :type => Integer
  field :invited_by_id, :type => String
  field :invited_by_type, :type => String
end
RUBY
        end
      end
    end    
  end
  ### OMNIAUTH ###
  if recipes.include? 'omniauth'
    provider = 'twitter' if recipes.include? 'twitter'
    provider = 'facebook' if recipes.include? 'facebook'
    provider = 'github' if recipes.include? 'github'
    provider = 'linkedin' if recipes.include? 'linkedin'
    provider = 'google-oauth2' if recipes.include? 'google-oauth2'
    provider = 'tumblr' if recipes.include? 'tumblr'
    # Don't use single-quote-style-heredoc: we want interpolation.
    create_file 'config/initializers/omniauth.rb' do <<-RUBY
Rails.application.config.middleware.use OmniAuth::Builder do
  provider :#{provider}, ENV['OMNIAUTH_PROVIDER_KEY'], ENV['OMNIAUTH_PROVIDER_SECRET']
end
RUBY
    end
  end
  ### CANCAN ###
  if recipes.include? 'cancan'
    generate 'cancan:ability'
    if recipes.include? 'admin_dashboard'
      # Limit access to the users#index page
      inject_into_file 'app/models/ability.rb', :after => "def initialize(user)\n" do <<-RUBY
    user ||= User.new # guest user (not logged in)
    if user.has_role? :admin
      can :manage, :all
    end
RUBY
      end
    end
  end
  ### GIT ###
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: authentication and authorization'" if recipes.include? 'git'
end # after_bundler


# >---------------------------------[ email ]---------------------------------<

@current_recipe = "email"
@before_configs["email"].call if @before_configs["email"]
say_recipe 'email'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/email.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  if recipes.include? 'email'
    ### DEVELOPMENT
    gsub_file 'config/environments/development.rb', /# Don't care if the mailer can't send/, '# ActionMailer Config'
    gsub_file 'config/environments/development.rb', /config.action_mailer.raise_delivery_errors = false/ do
  <<-RUBY
config.action_mailer.default_url_options = { :host => 'localhost:3000' }
  config.action_mailer.delivery_method = :smtp
  # change to true to allow email to be sent during development
  config.action_mailer.perform_deliveries = false
  config.action_mailer.raise_delivery_errors = true
  config.action_mailer.default :charset => "utf-8"
RUBY
    end
    ### TEST
    inject_into_file 'config/environments/test.rb', :before => "\nend" do 
  <<-RUBY
\n  
  # ActionMailer Config
  config.action_mailer.default_url_options = { :host => 'example.com' }
RUBY
    end
    ### PRODUCTION
    gsub_file 'config/environments/production.rb', /config.active_support.deprecation = :notify/ do
  <<-RUBY
config.active_support.deprecation = :notify

  config.action_mailer.default_url_options = { :host => 'example.com' }
  # ActionMailer Config
  # Setup for production - deliveries, no errors raised
  config.action_mailer.delivery_method = :smtp
  config.action_mailer.perform_deliveries = true
  config.action_mailer.raise_delivery_errors = false
  config.action_mailer.default :charset => "utf-8"
RUBY
    end
  end
  ### GMAIL ACCOUNT
  if recipes.include? 'gmail'
    gmail_configuration_text = <<-TEXT
\n
  config.action_mailer.smtp_settings = {
    address: "smtp.gmail.com",
    port: 587,
    domain: "example.com",
    authentication: "plain",
    enable_starttls_auto: true,
    user_name: ENV["GMAIL_USERNAME"],
    password: ENV["GMAIL_PASSWORD"]
  }
TEXT
    inject_into_file 'config/environments/development.rb', gmail_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
    inject_into_file 'config/environments/production.rb', gmail_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
  end
  ### SENDGRID ACCOUNT
  if recipes.include? 'sendgrid'
    sendgrid_configuration_text = <<-TEXT
\n
  config.action_mailer.smtp_settings = {
    address: "smtp.sendgrid.net",
    port: 25,
    domain: "example.com",
    authentication: "plain",
    user_name: ENV["SENDGRID_USERNAME"],
    password: ENV["SENDGRID_PASSWORD"]
  }
TEXT
    inject_into_file 'config/environments/development.rb', sendgrid_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
    inject_into_file 'config/environments/production.rb', sendgrid_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
  end
    ### MANDRILL ACCOUNT
    if recipes.include? 'mandrill'
      mandrill_configuration_text = <<-TEXT
  \n
    config.action_mailer.smtp_settings = {
      :address   => "smtp.mandrillapp.com",
      :port      => 25,
      :user_name => ENV["MANDRILL_USERNAME"],
      :password  => ENV["MANDRILL_API_KEY"]
    }
  TEXT
      inject_into_file 'config/environments/development.rb', mandrill_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
      inject_into_file 'config/environments/production.rb', mandrill_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
    end
    ### GIT
    git :add => '.' if recipes.include? 'git'
    git :commit => "-aqm 'rails_apps_composer: set email accounts'" if recipes.include? 'git'
end # after_bundler


# >--------------------------------[ models ]---------------------------------<

@current_recipe = "models"
@before_configs["models"].call if @before_configs["models"]
say_recipe 'models'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/models.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### DEVISE ###
  if recipes.include? 'devise'
    if recipes.include? 'mongoid'
      if recipes.include? 'devise-confirmable'
        raise StandardError.new "Sorry. An example app using MongoDB and devise-confirmable is not available."
      end
      copy_from_repo 'app/models/user.rb', :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-devise/master/' if recipes.include? 'mongoid'
    else
      generate 'migration AddNameToUsers name:string'
      if recipes.include? 'devise-confirmable'
        generate 'migration AddConfirmableToUsers confirmation_token:string confirmed_at:datetime confirmation_sent_at:datetime unconfirmed_email:string'
      end
      copy_from_repo 'app/models/user.rb', :repo => 'https://raw.github.com/RailsApps/rails3-devise-rspec-cucumber/master/'
    end
  end
  ### OMNIAUTH ###
  if recipes.include? 'omniauth'
    if recipes.include? 'mongoid'
      copy_from_repo 'app/models/user.rb', :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
    else
      generate 'model User name:string email:string provider:string uid:string'
      run 'bundle exec rake db:migrate'
      copy_from_repo 'app/models/user.rb', :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
      gsub_file 'app/models/user.rb', /class User/, 'class User < ActiveRecord::Base'
      gsub_file 'app/models/user.rb', /^\s*include Mongoid::Document\n/, ''
      gsub_file 'app/models/user.rb', /^\s*field.*\n/, ''
      gsub_file 'app/models/user.rb', /^\s*# run 'rake db:mongoid:create_indexes' to create indexes\n/, ''
      gsub_file 'app/models/user.rb', /^\s*index\(\{ email: 1 \}, \{ unique: true, background: true \}\)\n/, ''
    end
  end
  ### SUBDOMAINS ###
  copy_from_repo 'app/models/user.rb', :repo => 'https://raw.github.com/RailsApps/rails3-subdomains/master/' if recipes.include? 'subdomains'
  ### AUTHORIZATION (insert 'rolify' after User model is created) ###
  unless recipes.include? 'mongoid'
    generate 'rolify:role Role User'
  else
    generate 'rolify:role Role User mongoid'
  	# correct the generation of rolify 3.1 with mongoid
  	# the call to `rolify` should be *after* the inclusion of mongoid
  	# (see https://github.com/EppO/rolify/issues/61)
  	# This isn't needed for rolify>=3.2.0.beta4, but should cause no harm
  	gsub_file 'app/models/user.rb',
  		  /^\s*(rolify.*?)$\s*(include Mongoid::Document.*?)$/,
  		  "  \\2\n  extend Rolify\n  \\1\n"
  end
  ### GIT ###
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: models'" if recipes.include? 'git'
end # after_bundler


# >------------------------------[ controllers ]------------------------------<

@current_recipe = "controllers"
@before_configs["controllers"].call if @before_configs["controllers"]
say_recipe 'controllers'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/controllers.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### APPLICATION_CONTROLLER ###
  if recipes.include? 'omniauth'
    copy_from_repo 'app/controllers/application_controller.rb', :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
  end
  if recipes.include? 'cancan'
    inject_into_file 'app/controllers/application_controller.rb', :before => 'end' do <<-RUBY
  rescue_from CanCan::AccessDenied do |exception|
    redirect_to root_path, :alert => exception.message
  end
RUBY
    end
  end  
  ### HOME_CONTROLLER ###
  if recipes.include? 'simple_home'
    generate(:controller, "home index")
  end
  if recipes.include? 'user_accounts'
    gsub_file 'app/controllers/home_controller.rb', /def index/, "def index\n    @users = User.all"
  end
  ### USERS_CONTROLLER ###
  if recipes.include? 'user_accounts'
    if recipes.include? 'devise'
      copy_from_repo 'app/controllers/users_controller.rb', :repo => 'https://raw.github.com/RailsApps/rails3-devise-rspec-cucumber/master/'
    elsif recipes.include? 'omniauth'
      copy_from_repo 'app/controllers/users_controller.rb', :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
    end
    if recipes.include? 'cancan'
      inject_into_file 'app/controllers/users_controller.rb', "    authorize! :index, @user, :message => 'Not authorized as an administrator.'\n", :after => "def index\n"
    end
  end
  gsub_file 'app/controllers/users_controller.rb', /before_filter :authenticate_user!/, '' if recipes.include? 'subdomains'
  ### SESSIONS_CONTROLLER ###
  if recipes.include? 'omniauth'
    filename = 'app/controllers/sessions_controller.rb'
    copy_from_repo filename, :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
    provider = 'facebook' if recipes.include? 'facebook'
    provider = 'github' if recipes.include? 'github'
    provider = 'linkedin' if recipes.include? 'linkedin'
    provider = 'google-oauth2' if recipes.include? 'google-oauth2'
    provider = 'tumblr' if recipes.include? 'tumblr'
    gsub_file filename, /twitter/, provider unless recipes.include? 'twitter'
  end
  ### PROFILES_CONTROLLER ###
  copy_from_repo 'app/controllers/profiles_controller.rb', :repo => 'https://raw.github.com/RailsApps/rails3-subdomains/master/' if recipes.include? 'subdomains'
  ### GIT ###
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: controllers'" if recipes.include? 'git'
end # after_bundler


# >---------------------------------[ views ]---------------------------------<

@current_recipe = "views"
@before_configs["views"].call if @before_configs["views"]
say_recipe 'views'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/views.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### DEVISE ###
  copy_from_repo 'app/views/devise/shared/_links.html.erb' if recipes.include? 'devise'
  copy_from_repo 'app/views/devise/registrations/edit.html.erb' if recipes.include? 'devise'
  copy_from_repo 'app/views/devise/registrations/new.html.erb' if recipes.include? 'devise'
  ### HOME ###
  copy_from_repo 'app/views/home/index.html.erb' if recipes.include? 'user_accounts'
  copy_from_repo 'app/views/home/index-subdomains.html.erb', :recipe => 'subdomains'
  ### USERS ###
  if recipes.include? 'user_accounts'
    ## INDEX
    copy_from_repo 'app/views/users/index.html.erb'
    ## SHOW
    copy_from_repo 'app/views/users/show.html.erb'
    copy_from_repo 'app/views/users/show-subdomains.html.erb', :recipe => 'subdomains'
    ## EDIT
    copy_from_repo 'app/views/users/edit-omniauth.html.erb', :recipe => 'omniauth'
  end
  ### PROFILES ###
  copy_from_repo 'app/views/profiles/show-subdomains.html.erb', :recipe => 'subdomains'
  ### GIT ###
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: views'" if recipes.include? 'git'
end # after_bundler


# >--------------------------------[ routes ]---------------------------------<

@current_recipe = "routes"
@before_configs["routes"].call if @before_configs["routes"]
say_recipe 'routes'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/routes.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### HOME ###
  if recipes.include? 'simple_home'
    remove_file 'public/index.html'
    gsub_file 'config/routes.rb', /get \"home\/index\"/, 'root :to => "home#index"'
  end
  ### USER_ACCOUNTS ###
  if recipes.include? 'user_accounts'
    ## DEVISE
    copy_from_repo 'config/routes.rb', :repo => 'https://raw.github.com/RailsApps/rails3-devise-rspec-cucumber/master/' if recipes.include? 'devise'
    ## OMNIAUTH
    copy_from_repo 'config/routes.rb', :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/' if recipes.include? 'omniauth'
  end
  ### SUBDOMAINS ###
  copy_from_repo 'lib/subdomain.rb', :repo => 'https://raw.github.com/RailsApps/rails3-subdomains/master/' if recipes.include? 'subdomains'
  copy_from_repo 'config/routes.rb', :repo => 'https://raw.github.com/RailsApps/rails3-subdomains/master/' if recipes.include? 'subdomains'
  ### CORRECT APPLICATION NAME ###
  gsub_file 'config/routes.rb', /^.*.routes.draw do/, "#{app_const}.routes.draw do"
  ### GIT ###
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: routes'" if recipes.include? 'git'
end # after_bundler


# >-------------------------------[ frontend ]--------------------------------<

@current_recipe = "frontend"
@before_configs["frontend"].call if @before_configs["frontend"]
say_recipe 'frontend'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/frontend.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### LAYOUTS ###
  copy_from_repo 'app/views/layouts/application.html.erb'
  copy_from_repo 'app/views/layouts/application-bootstrap.html.erb', :recipe => 'bootstrap'
  copy_from_repo 'app/views/layouts/_messages.html.erb'
  copy_from_repo 'app/views/layouts/_messages-bootstrap.html.erb', :recipe => 'bootstrap'
  copy_from_repo 'app/views/layouts/_navigation.html.erb'
  copy_from_repo 'app/views/layouts/_navigation-devise.html.erb', :recipe => 'devise'
  copy_from_repo 'app/views/layouts/_navigation-cancan.html.erb', :recipe => 'cancan'
  copy_from_repo 'app/views/layouts/_navigation-omniauth.html.erb', :recipe => 'omniauth'
  copy_from_repo 'app/views/layouts/_navigation-subdomains.html.erb', :recipe => 'subdomains'  
  ## APPLICATION NAME
  if recipes.include? 'haml'
    gsub_file 'app/views/layouts/application.html.haml', /App_Name/, "#{app_name.humanize.titleize}"
    gsub_file 'app/views/layouts/_navigation.html.haml', /App_Name/, "#{app_name.humanize.titleize}"
  else
    gsub_file 'app/views/layouts/application.html.erb', /App_Name/, "#{app_name.humanize.titleize}"
    gsub_file 'app/views/layouts/_navigation.html.erb', /App_Name/, "#{app_name.humanize.titleize}"
  end
  ### CSS ###
  remove_file 'app/assets/stylesheets/application.css'
  copy_from_repo 'app/assets/stylesheets/application.css.scss'
  copy_from_repo 'app/assets/stylesheets/application-bootstrap.css.scss', :recipe => 'bootstrap'
  if recipes.include? 'bootstrap-less'
    generate 'bootstrap:install'
    insert_into_file 'app/assets/stylesheets/bootstrap_and_overrides.css.less', "body { padding-top: 60px; }\n", :after => "@import \"twitter/bootstrap/bootstrap\";\n"
  elsif recipes.include? 'bootstrap-sass'
    insert_into_file 'app/assets/javascripts/application.js', "//= require bootstrap\n", :after => "jquery_ujs\n"
    create_file 'app/assets/stylesheets/bootstrap_and_overrides.css.scss', <<-RUBY
@import "bootstrap";
body { padding-top: 60px; }
@import "bootstrap-responsive";
RUBY
  elsif recipes.include? 'foundation'
    insert_into_file 'app/assets/javascripts/application.js', "//= require foundation\n", :after => "jquery_ujs\n"
    insert_into_file 'app/assets/stylesheets/application.css.scss', " *= require foundation\n", :after => "require_self\n"
  elsif recipes.include? 'skeleton'
    copy_from_repo 'app/assets/stylesheets/normalize.css.scss', :repo => 'https://raw.github.com/necolas/normalize.css/master/normalize.css'
    copy_from_repo 'app/assets/stylesheets/base.css.scss', :repo => 'https://raw.github.com/dhgamache/Skeleton/master/stylesheets/base.css'
    copy_from_repo 'app/assets/stylesheets/layout.css.scss', :repo => 'https://raw.github.com/dhgamache/Skeleton/master/stylesheets/layout.css'
    copy_from_repo 'app/assets/stylesheets/skeleton.css.scss', :repo => 'https://raw.github.com/dhgamache/Skeleton/master/stylesheets/skeleton.css'
  elsif recipes.include? 'normalize'
    copy_from_repo 'app/assets/stylesheets/normalize.css.scss', :repo => 'https://raw.github.com/necolas/normalize.css/master/normalize.css'
  end
  ### GIT ###
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: front-end framework'" if recipes.include? 'git'
end # after_bundler


# >-------------------------------[ database ]--------------------------------<

@current_recipe = "database"
@before_configs["database"].call if @before_configs["database"]
say_recipe 'database'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/database.rb

after_everything do
  say_wizard "recipe running after everything"
  ### PREPARE SEED ###
  if recipes.include? 'devise'
    if recipes.include? 'devise-confirmable'
      ## DEVISE-CONFIRMABLE
      append_file 'db/seeds.rb' do <<-FILE
puts 'SETTING UP DEFAULT USER LOGIN'
user = User.create! :name => 'First User', :email => 'user@example.com', :password => 'please', :password_confirmation => 'please', :confirmed_at => Time.now.utc
puts 'New user created: ' << user.name
user2 = User.create! :name => 'Second User', :email => 'user2@example.com', :password => 'please', :password_confirmation => 'please', :confirmed_at => Time.now.utc
puts 'New user created: ' << user2.name
FILE
      end
    else
      ## DEVISE-DEFAULT
      append_file 'db/seeds.rb' do <<-FILE
puts 'SETTING UP DEFAULT USER LOGIN'
user = User.create! :name => 'First User', :email => 'user@example.com', :password => 'please', :password_confirmation => 'please'
puts 'New user created: ' << user.name
user2 = User.create! :name => 'Second User', :email => 'user2@example.com', :password => 'please', :password_confirmation => 'please'
puts 'New user created: ' << user2.name
FILE
      end
    end
    if recipes.include? 'subdomains'
      gsub_file 'db/seeds.rb', /First User/, 'user1'
      gsub_file 'db/seeds.rb', /Second User/, 'user2'
    end
    if recipes.include? 'cancan'
      append_file 'db/seeds.rb' do <<-FILE
user.add_role :admin
FILE
      end
    end
    ## DEVISE-INVITABLE
    if recipes.include? 'devise-invitable'
      run 'bundle exec rake db:migrate'
      generate 'devise_invitable user'
    end    
  end
  ### APPLY SEED ###
  unless recipes.include? 'mongoid'
    ## MONGOID
    say_wizard "applying migrations and seeding the database"
    run 'bundle exec rake db:migrate'
    run 'bundle exec rake db:test:prepare'
  else
    ## ACTIVE_RECORD
    say_wizard "dropping database, creating indexes and seeding the database"
    run 'bundle exec rake db:drop'
    run 'bundle exec rake db:mongoid:create_indexes'
  end
  run 'bundle exec rake db:seed'
  ### GIT ###
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: set up database'" if recipes.include? 'git'
end # after_everything


# >--------------------------------[ extras ]---------------------------------<

@current_recipe = "extras"
@before_configs["extras"].call if @before_configs["extras"]
say_recipe 'extras'

config = {}
config['ban_spiders'] = yes_wizard?("Set a robots.txt file to ban spiders?") if true && true unless config.key?('ban_spiders')
config['jsruntime'] = yes_wizard?("Add 'therubyracer' JavaScript runtime (for Linux users without node.js)?") if true && true unless config.key?('jsruntime')
config['rvmrc'] = yes_wizard?("Create a project-specific rvm gemset and .rvmrc?") if true && true unless config.key?('rvmrc')
@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/extras.rb

if config['ban_spiders']
  say_wizard "Banning spiders by modifying 'public/robots.txt'"
  after_bundler do
    gsub_file 'public/robots.txt', /# User-Agent/, 'User-Agent'
    gsub_file 'public/robots.txt', /# Disallow/, 'Disallow'
  end
end

if config['jsruntime']
  say_wizard "Adding 'therubyracer' JavaScript runtime gem"
  # maybe it was already added for bootstrap-less?
  unless recipes.include? 'bootstrap-less'
    gem 'therubyracer', :group => :assets, :platform => :ruby
  end
end

if config['rvmrc']
  # using the rvm Ruby API, see:
  # http://blog.thefrontiergroup.com.au/2010/12/a-brief-introduction-to-the-rvm-ruby-api/
  if ENV['MY_RUBY_HOME'] && ENV['MY_RUBY_HOME'].include?('rvm')
    begin
      rvm_path     = File.dirname(File.dirname(ENV['MY_RUBY_HOME']))
      rvm_lib_path = File.join(rvm_path, 'lib')
      require 'rvm'
    rescue LoadError
      raise "RVM ruby lib is currently unavailable."
    end
  else
    raise "RVM ruby lib is currently unavailable."
  end
  say_wizard "creating RVM gemset '#{app_name}'"
  RVM.gemset_create app_name
  run "rvm rvmrc trust"
  say_wizard "switching to gemset '#{app_name}'"
  begin
    RVM.gemset_use! app_name
  rescue StandardError
    raise "Use rvm gem 1.11.3.5 or newer."
  end
  run "rvm gemset list"
  copy_from_repo '.rvmrc'
  gsub_file '.rvmrc', /App_Name/, "#{app_name}"
end

after_everything do
  say_wizard "recipe removing unnecessary files and whitespace"
  %w{
    public/index.html
    app/assets/images/rails.png
  }.each { |file| remove_file file }
  # remove commented lines and multiple blank lines from Gemfile
  # thanks to https://github.com/perfectline/template-bucket/blob/master/cleanup.rb
  gsub_file 'Gemfile', /#.*\n/, "\n"
  gsub_file 'Gemfile', /\n^\s*\n/, "\n"
  # remove commented lines and multiple blank lines from config/routes.rb
  gsub_file 'config/routes.rb', /  #.*\n/, "\n"
  gsub_file 'config/routes.rb', /\n^\s*\n/, "\n"
  # GIT
  git :add => '.' if recipes.include? 'git'
  git :commit => "-aqm 'rails_apps_composer: starter app complete'" if recipes.include? 'git'
end





@current_recipe = nil

# >-----------------------------[ Run Bundler ]-------------------------------<

say_wizard "Installing gems. This will take a while."
run 'bundle install --without production'
say_wizard "Running 'after bundler' callbacks."
require 'bundler/setup'
@after_blocks.each{|b| config = @configs[b[0]] || {}; @current_recipe = b[0]; b[1].call}

@current_recipe = nil
say_wizard "Running 'after everything' callbacks."
@after_everything_blocks.each{|b| config = @configs[b[0]] || {}; @current_recipe = b[0]; b[1].call}

@current_recipe = nil
say_wizard "Finished running the rails_apps_composer app template."
say_wizard "Your new Rails app is ready."
